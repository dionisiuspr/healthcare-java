package com.example.healthcare_java.controller;

import com.example.healthcare_java.model.Patient;
import com.example.healthcare_java.repository.PatientRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/healthcare") // This means URL's start with /healthcare (after Application path)
public class PatientController {
    @Autowired // This means to get the bean called patientRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PatientRepository patientRepository;

    @PostMapping(path = "/patient/add") // Map ONLY POST Requests
    public @ResponseBody ResponseEntity<Patient> addNewPatient(@RequestParam String patient_name,
            @RequestParam String patient_address, @RequestParam int patient_age, @RequestParam String patient_dob,
            @RequestParam String patient_gender) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        try {
            Patient patientData = new Patient();
            patientData.setPatient_name(patient_name);
            patientData.setPatient_address(patient_address);
            patientData.setPatient_age(patient_age);
            patientData.setPatient_dob(patient_dob);
            patientData.setPatient_gender(patient_gender);
            patientRepository.save(patientData);
            return ResponseEntity.ok(patientData);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping(path = "/patient")
    public @ResponseBody ResponseEntity<Iterable<Patient>> getAllPatient() {
        // This returns a JSON or XML with the users
        try {
            return ResponseEntity.ok(patientRepository.findAll());
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @GetMapping(path = "/patient/{id}")
    public @ResponseBody ResponseEntity<Patient> getPatient(@PathVariable int id) {
        try {
            Patient patientData = patientRepository.findById(id).get();
            return ResponseEntity.ok(patientData);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @PutMapping(path = "/patient/{patient_id}")
    public @ResponseBody ResponseEntity<Patient> updatePatient(@RequestParam String patient_name,
            @RequestParam String patient_address, @RequestParam int patient_age, @RequestParam String patient_dob,
            @RequestParam String patient_gender, @PathVariable int patient_id) {

        try {
            Patient patientData = new Patient();
            patientData.setPatient_id(patient_id);
            patientData.setPatient_name(patient_name);
            patientData.setPatient_address(patient_address);
            patientData.setPatient_age(patient_age);
            patientData.setPatient_dob(patient_dob);
            patientData.setPatient_gender(patient_gender);
            patientRepository.save(patientData);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }

    @DeleteMapping(path = "/patient/{id}")
    public @ResponseBody ResponseEntity<Void> deletePatient(@PathVariable int id) {
        try {
            patientRepository.deleteById(id);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
}